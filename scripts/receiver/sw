	#!/bin/bash
	## Last Modified 2017-06-21 - Just Add Power

	HELP(){
		echo "Command:"
		echo " switch"
		echo "Options:"
		echo " TX & RX:"
		echo "  rx[A-C,E] tx[Z]"
		echo "  rx[A-C,E] back"
		echo " RX:"
		echo "  up | down | [X]"
		echo "Details:"
		echo " rx[A-C,E] tx[Z] - Switches Receivers A-C and E to watch Transmitter Z"
		echo " rx[A-C,E] back - Switches the selected Receivers back to the previous Transmitter they were watching (relies on this command)"
		echo " up - Switches this Receiver up to the next available Transmitter (from tx1 to tx2, for example)"
		echo " down - Switches this Receiver down to the next available Transmitter (from tx5 to tx4, for example)"
		echo " [X] - Switches this Receiver to watch Transmitter X"
		echo "Examples:"
		echo " switch rx1-5,7,9,11-16 tx5"
		echo " switch 7"
	}

	check_hostname_mode(){
	# Cope with legacy switch command syntax for older systems already using hostname switching
		if [ "$(astparam g multicast_ip)" != '"multicast_ip" not defined' ] ; then
			channel $1
			exit
		fi
	}
	check_switch_info(){
		if [ "$(astparam g switch)" != "Cisco" ] && [ "$(astparam g switch)" != "Luxul" ] ; then
			getswitchinfo.sh
		fi
		export GW=$(astparam g gatewayip)
		export SWITCH=$(astparam g switch)
		export PORT=$(astparam g switchport)
		export TOTAL_SOURCES=$(astparam g totalsources)
		export CURRENT_TX=$(astparam g currentvlan)
		export MAX_TX=$(($TOTAL_SOURCES + 10))
	}
	self_switch_up(){
		if [ "$HW" = "TX" ];then # Prevent self switching on Tranmsitter ports
			exit
		fi
		if [ $CURRENT_TX == $MAX_TX ] ; then
			export NEW_TX=11
		else
			export NEW_TX=$(($CURRENT_TX + 1))
		fi
		execute_self_switch
	}

	self_switch_down(){
		if [ "$HW" = "TX" ];then # Prevent self switching on Tranmsitter ports
			exit
		fi
		if [ $CURRENT_TX == 11 ] ; then
			export NEW_TX=$MAX_TX
		else
			export NEW_TX=$(($CURRENT_TX - 1))
		fi
		execute_self_switch
	}

	self_switch_target(){
		if [ "$HW" = "TX" ];then # Prevent self switching on Tranmsitter ports
			exit
		fi
		if [ $1 -ge 1 ] && [ $1 -le $TOTAL_SOURCES ] ; then
			export NEW_TX=$(($1 + 10))
			execute_self_switch
		else
			echo "SWITCH: ERROR - Cannot switch to source $1. Valid sources are 1 thru $TOTAL_SOURCES"
		fi
	}

	execute_self_switch(){
		local TX_NUM=$(($NEW_TX - 10))
		echo "SWITCH: Switching this Receiver ($PORT) to Transmitter $TX_NUM in VLAN $NEW_TX"
		if [ "$SWITCH" == "Cisco" ] ; then
		(
			printf "cisco\r"
			printf "cisco\r"
			printf "ena\r conf\r int $PORT\r sw g al v r 11-399\r sw g al v a $NEW_TX u\r end\r"
			sleep 1
			break 2> /dev/null
		) | telnet $GW > SWITCHING_LOG &
		elif [ "$SWITCH" == "Luxul" ] ; then
		(
			printf "admin\r"
			printf "admin\r"
			sleep 1
			printf "enable\r conf t\r int $PORT\r sw hy al vl rem 11-399\r sw hy al vl ad $NEW_TX\r end\r"
			sleep 1
			break 2> /dev/null
		) | telnet $GW > SWITCHING_LOG &
		fi
		astparam s currentvlan $NEW_TX
		export OSD_STR=$(($NEW_TX - 10))
		osd_on_tl.sh 1> /dev/null
		osd_off.sh 2&

	}

	validate_selection(){
	# Data Validation
		RX_SELECTION=($(echo $1 | cut -d'x' -f2 | tr ',' ' '))
		if [ $# -eq 2 ];then
			TX_SELECTION=$(echo $2 | cut -d'x' -f2)
			# Verify valid Transmitter selection
			if [ $TX_SELECTION -gt $TOTAL_SOURCES ];then
				echo "SWITCH: ERROR - Cannot switch to source $TX_SELECTION. Valid sources are 1 thru $TOTAL_SOURCES"
			exit
			fi
		fi
		# Expand x-y syntax
		for i in ${!RX_SELECTION[@]};do
			CONSEC_TEST=${RX_SELECTION[i]}
			if [ $(echo $CONSEC_TEST | grep \-) ];then
				RX_SELECTION=(${RX_SELECTION[@]/${RX_SELECTION[i]}}) # remove consecutive element from the list
				START=$(echo $CONSEC_TEST | cut -d'-' -f1)
				END=$(echo $CONSEC_TEST | cut -d'-' -f2)
				if [ $START -gt $END ];then # reverse the order if descending order supplied
					START=$(echo $CONSEC_TEST | cut -d'-' -f2)
					END=$(echo $CONSEC_TEST | cut -d'-' -f1)
				fi
				while [ $START -le $END ];do
					RX_SELECTION=(${RX_SELECTION[@]} $START) # add incrementals of the consecutive element back into the array
					START=$(($START+1))
				done
			fi
		done
		# Verify and correct for any duplications
		RX_SELECTION=($(echo ${RX_SELECTION[@]} | tr ' ' '\n' | awk '!COPY_CHECKER[$0]++' | tr '\n' ' '))
		# Verify valid Receiver selection
		for i in ${RX_SELECTION[@]};do
			if [ $i -gt ${#RX_PORT_LIST[*]} ];then
				echo "SWITCH: ERROR - Cannot switch Receiver $i. Valid Receivers are 1 thru ${#RX_PORT_LIST[*]}"
				exit
			fi
		done
		
	}

	target_switch_group(){
		if [ "$(lmparam g RX_PORT_LIST)" == "" ];then
			echo "SWITCH: Initial Receiver data unavailable, generating now..."
			getswitchinfo.sh vlans
		fi
	# Takes format of 'switch rx1,2,3,4 tx5' and switches specified displays to watch specified source
		RX_PORT_LIST=($(lmparam g RX_PORT_LIST))
		validate_selection $1 $2
		TX_VLAN=$(($TX_SELECTION + 10))

	# Switching happens here	
		echo "SWITCH: Switching Receivers ${RX_SELECTION[*]} to watch Transmitter $TX_SELECTION"
		if [ "$SWITCH" == "Cisco" ] ; then
			for i in ${RX_SELECTION[@]}; do
				if [ "$PORTS" == "" ];then
					export PORTS=gi${RX_PORT_LIST[$i-1]}
				else
					export PORTS=$PORTS,gi${RX_PORT_LIST[$i-1]}
				fi
			done
			(
				printf "cisco\r"
				printf "cisco\r"
				printf "ena\r conf\r int ran $PORTS\r sw g al v r 11-399\r sw g al v a $TX_VLAN u\r end\r"
				sleep 1
				break 2> /dev/null
			) | telnet $GW > SWITCHING_LOG &
		elif [ "$SWITCH" == "Luxul" ] ; then
			for i in ${RX_SELECTION[@]}; do
				export PORTS=$PORTS${RX_PORT_LIST[$i-1]}\;
			done
			(
				printf "admin\r"
				printf "admin\r"
				sleep 1
				printf "enable\r conf t\r int gi $PORTS\r sw hy al vl 10,$TX_VLAN\r end\r"
				sleep 1
				break 2> /dev/null
			) | telnet $GW > SWITCHING_LOG &
		fi
	}
	target_switch_back(){
	# Switches selected Receivers back to original VLANs defined with 'getswitchinfo.sh vlans'
		if [ "$(lmparam g RX_VLAN_LIST)" == "" ];then
			echo "SWITCH: No previous Transmitter data available"
			exit
		fi
		RX_PORT_LIST=($(lmparam g RX_PORT_LIST))
		RX_VLAN_LIST=($(lmparam g RX_VLAN_LIST))
		validate_selection $1
		
		echo "SWITCH: Switching Receivers ${RX_SELECTION[*]} to watch last known Transmitters"
		if [ "$SWITCH" == "Cisco" ] ; then
			(
				printf "cisco\r"
				printf "cisco\r"
				sleep 1
				for i in ${RX_SELECTION[@]}; do
					export PORT=gi${RX_PORT_LIST[$i-1]}
					export VLAN=${RX_VLAN_LIST[$i-1]}
					printf "ena\r conf\r int $PORT\r sw g al v r 11-399\r sw g al v a $VLAN u\r end\r"
				done
				sleep 1
				break 2> /dev/null
			) | telnet $GW > SWITCHING_LOG &
		elif [ "$SWITCH" == "Luxul" ] ; then
			(
				printf "admin\r"
				printf "admin\r"
				sleep 1
				for i in ${RX_SELECTION[@]}; do
					export PORT=${RX_PORT_LIST[$i-1]}
					export VLAN=${RX_VLAN_LIST[$i-1]}
					printf "enable\r conf t\r int gi $PORT\r sw hy al vl 10,$VLAN\r end\r"
				done
				sleep 1
				break 2> /dev/null
			) | telnet $GW > SWITCHING_LOG &
		fi
	}
	pvid_switch(){
		PORT=$(echo $1 | cut -d':' -f2)
		VLAN=$(echo $2 | cut -d':' -f2)
		PVID=$(echo $3 | cut -d':' -f2)
		if [ "$SWITCH" == "Cisco" ];then
			(
				printf "cisco\r"
				printf "cisco\r"
				sleep 1
				printf "ena\r conf\r int $PORT\r sw g al v r 11-399\r sw g al v a $VLAN u\r sw g p $PVID\r end\r"
				sleep 1
			) | telnet $GW > SWITCHING_LOG &
		elif [ "$SWITCH" == "Luxul" ];then
			(
				printf "admin\r"
				printf "admin\r"
				sleep 1
				printf "enable\r conf t\r int gi $PORT\r sw hy al vl 10,$VLAN\r sw hy nat vl $PVID\r end\r"
				sleep 1
			) | telnet $GW > SWITCHING_LOG &
		fi
	}

	check_hostname_mode $1
	check_switch_info

	# Only allow certain functions to happen on Receivers
	case $(cat /www/index.html | grep title | cut -d'-' -f1 | cut -d'>' -f2) in
		*R*) export HW="RX";;
		*T*) export HW="TX";;
	esac

	case $1 in
		up) self_switch_up;;
		down) self_switch_down;;
		[1-9]|[1-9][0-9]|[1-3][0-9][0-9]) self_switch_target $1;;
		rx*) 
			if [ "$2" == "back" ];then
				target_switch_back $1
			else
				target_switch_group $1 $2
			fi
			;;
		port*) pvid_switch $1 $2 $3;;
		*) HELP;;
	esac
